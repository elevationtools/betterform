#!/usr/bin/env bash
#
# Internal helper, do not use directly.
# Used to avoid backslash escape clutter in ctl.mk
set -euo pipefail

function main() {
  : ${GENFILES:?}
  : ${OUTPUT_FILE:?}
  : ${CONFIG_JSON_FILE:?}

  : ${INTERACTIVE:=true}

  cmd="${1:?}"

	export TF_VAR_config_json_file="$(realpath "$CONFIG_JSON_FILE")"

  case "$cmd" in
    init|up|down) "cmd_$cmd" ;;
    *) echo "ERROR: invalid command: $cmd" >&2; return 1 ;;
  esac
}

function cmd_init() {
  if [ -e .terraform.lock.hcl ]; then
    cp -at "$GENFILES/stamp/" .terraform.lock.hcl
  fi
  (
    cd "$GENFILES/stamp"
    echo "Running terraform init"
    terraform init $(interactive || echo '-input=false')
  )
  cp -at ./ "$GENFILES/stamp/.terraform.lock.hcl"
}

function cmd_up() {
  outfile_abs="$(realpath "$OUTPUT_FILE")"
  (
    cd "$GENFILES/stamp"
    echo "Running terraform apply"
    terraform apply $(interactive || echo '-input=false -auto-approve')
    if terraform output -json > "${outfile_abs}.tmp"; then
      mv "${outfile_abs}.tmp" "$outfile_abs"
    else
      echo "ERROR: any output remains in ${outfile_abs}.tmp" >&2
      return 1
    fi
  )
}

function cmd_down() {
  (
    cd "$GENFILES/stamp"
		echo "Running terraform destroy"
		terraform destroy $(interactive || echo '-input=false -auto-approve')
	)
}

function interactive() {
  if [[ "$INTERACTIVE" = false ]]; then
    false
  else
    true
  fi
}

main "$@"

